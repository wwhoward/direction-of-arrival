function [outputArg1,outputArg2] = est_fusion(R, par, paths)
% 1) Estimate model order
% 2) Estimate indicator vector
% 3) Estimate MUSIC in indicated intervals

%%
%-----------------//-----------------
% Model Order Estimation goes here
k_hat = par.K;
%-----------------//-----------------

%%
%-----------------//-----------------
% Indicator Vector Estimation goes here, requires estimate of model order
est = est_drmusic(R, par);
stats = 

ele_endpoints = [0:par.fusion_interval:(pi-par.fusion_interval) ; par.fusion_interval:par.fusion_interval:pi]';
azi_endpoints = [0:par.fusion_interval:((2*pi)-par.fusion_interval) ; par.fusion_interval:par.fusion_interval:(2*pi)]';

ele_ind_est = sum(((stats.uh(2,:)>ele_endpoints(:,1)) & (stats.uh(2,:) < ele_endpoints(:,2))),2);
azi_ind_est = sum(((stats.uh(1,:)>azi_endpoints(:,1)) & (stats.uh(1,:) < azi_endpoints(:,2))),2);
%-----------------//-----------------

switch par.type
    case '1d'
        azi_ind_est = paths.azi_intind;
        
        azi_index = find(azi_ind_est == 1);
        
        azi_interval = [par.fusion_interval*(azi_index-1), par.fusion_interval*azi_index];
    case '2d'
        azi_ind_est = paths.azi_intind;
        ele_ind_est = paths.ele_intind;
        
        azi_index = find(azi_ind_est == 1);
        ele_index = find(ele_ind_est == 1);
        
        azi_interval = [par.fusion_interval*(azi_index-1), par.fusion_interval*azi_index];
        ele_interval = [par.fusion_interval*(ele_index-1), par.fusion_interval*ele_index];
end


%-----------------//-----------------
% 


outputArg1 = inputArg1;
outputArg2 = inputArg2;
end

